#! /usr/bin/env bash

# Copyright 2014 Fluo authors (see AUTHORS)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Start: Resolve Script Directory
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
   bin="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
   SOURCE="$(readlink "$SOURCE")"
   [[ $SOURCE != /* ]] && SOURCE="$bin/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
bin="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
# Stop: Resolve Script Directory

. "$bin"/impl/load-env.sh "$1"

function check_dirs() {
  if [[ ! -d "$HADOOP_PREFIX" ]]; then
    echo "HADOOP_PREFIX=$HADOOP_PREFIX is not a valid directory.  Please make sure it exists"
    exit 1
  fi
  if [[ ! -d "$ZOOKEEPER_HOME" ]]; then
    echo "ZOOKEEPER_HOME=$ZOOKEEPER_HOME is not a valid directory.  Please make sure it exists"
    exit 1
  fi
  if [[ ! -d "$ACCUMULO_HOME" ]]; then
    echo "ACCUMULO_HOME=$ACCUMULO_HOME is not a valid directory.  Please make sure it exists"
    exit 1
  fi
}

case "$1" in
fetch)
  if [[ "$2" == "all" ]]; then
    "$bin"/impl/fetch.sh accumulo
    "$bin"/impl/fetch.sh fluo
    "$bin"/impl/fetch.sh hadoop
    "$bin"/impl/fetch.sh metrics
    "$bin"/impl/fetch.sh spark
    "$bin"/impl/fetch.sh zookeeper
  else
    "$bin"/impl/fetch.sh "${@:2}"
  fi
	;;
setup)
  case "$2" in
  accumulo)
    "$bin"/impl/setup-accumulo.sh "${@:2}"
    ;;
  fluo)
    "$bin"/impl/setup-fluo.sh "${@:2}"
    ;;
  fluo-only)
    "$bin"/impl/setup-fluo-only.sh "${@:2}"
    ;;
  *)
    echo "Usage: uno setup <command>"
    echo -e "\nPossible commands:\n"
    echo "    accumulo   Sets up Accumulo along with Hadoop, Zookeeper and Spark"
    echo "    fluo       Sets up Fluo along with Accumulo (and its dependences)."
    echo "               Also, sets up metrics server (if SETUP_METRICS=true in env.sh)"
    echo "    fluo-only  Sets up Fluo only. Useful for upgrading Fluo without losing cluster data."
    exit 1
  esac
	;;
kill)
  "$bin"/impl/kill.sh "${@:2}"
	;;
ashell)
  check_dirs
  "$ACCUMULO_HOME"/bin/accumulo shell -u "$ACCUMULO_USER" -p "$ACCUMULO_PASSWORD" "${@:2}"
	;;
env)
  "$bin"/impl/print-env.sh "${@:2}"
  ;;
version)
  "$bin"/impl/version.sh "${@:2}"
  ;;
*)
  echo -e "Usage: uno <command> (<argument>)\n"
  echo -e "Possible commands:\n"
  echo "  fetch <dependency>  Fetches dependencies by either building or downloading them (as configured by env.sh)"
  echo "                      Run 'uno fetch all' to fetch all dependencies. Run 'uno fetch' for list of dependencies."
  echo "  setup <command>     Sets up development cluster (clearing any existing data)"
  echo "                      Run 'uno setup fluo' to setup all possible software. Run 'uno setup' for list of commands."
  echo "  kill                Kills all software"
  echo "  ashell              Runs the Accumulo shell"
  echo "  env                 Prints out shell configuration for PATH and common environment variables."
  echo "                      Add '--paths' or '--vars' command to limit what is printed."
  echo "  version <dep>       Prints out configured version for dependency"
  echo " " 
  exit 1
esac
